{"version":3,"sources":["etc/mouseclick.mp3","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Game","props","state","level","score","wrongWordCount","wordList","correctWordList","wrongWordList","levelStarted","memorizingEnded","final","errors","handleCorrectAnswers","bind","fetchWords","handleLists","handleNextLevel","waitSeconds","countDownElement","document","getElementById","pluralElement","countdown","setInterval","clearInterval","innerHTML","this","finalLevel","setState","wrongWords","totalWords","fetch","websiteUrl","response","json","data","handleStrings","lst","map","word","slice","wordToPush","length","push","concat","sort","Math","random","setTimeout","Countdown","e","target","id","isWordInTheList","i","clickEffectAudio","className","isLevelEnded","play","nickname","buttonElement","wordsToMemorize","index","key","endQuestions","onClick","style","width","FacebookShareButton","url","quote","hashtag","FacebookIcon","size","TwitterShareButton","TwitterIcon","window","location","reload","type","src","clickeffect","Component","App","href","path","component","open","fontFamily","minWidth","color","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee4c0ed6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mouseclick.cb264995.mp3\";","import React, { Component } from 'react'\nimport clickeffect from '../etc/mouseclick.mp3'\nimport {VscDebugRestart, VscDebugStart} from 'react-icons/vsc'\nimport {FacebookShareButton, FacebookIcon, TwitterIcon, TwitterShareButton} from 'react-share'\n\n\nexport class Game extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            level: 1,\n            score: 0,\n            wrongWordCount: 0,\n            wordList: [],\n            correctWordList: [],\n            wrongWordList: [],\n            levelStarted: false,\n            memorizingEnded: false,\n            final: false,\n            errors: false,\n        }\n        this.handleCorrectAnswers = this.handleCorrectAnswers.bind(this)\n        this.fetchWords = this.fetchWords.bind(this)\n        this.handleLists = this.handleLists.bind(this)\n        this.handleNextLevel = this.handleNextLevel.bind(this)\n\n    }\n\n    Countdown(waitSeconds) {\n        const countDownElement = document.getElementById(\"countdown\")\n        const pluralElement = document.getElementById(\"plural\")\n        if (countDownElement != null) {\n            var countdown = setInterval(() => {\n                waitSeconds--;\n                if (waitSeconds <= 0) { clearInterval(countdown) }\n                else if (waitSeconds <= 1) { pluralElement.innerHTML = ' second' }\n                else { pluralElement.innerHTML = ' seconds' }\n                countDownElement.innerHTML = waitSeconds\n            }, 1000);\n        }\n        else { return -1 }\n    }\n\n\n    handleNextLevel() {\n\n        const { level } = this.state\n        var finalLevel = 5\n        // If current level is equal to finalLevel+1 that means player finished the finalLevel.\n        if (level == finalLevel + 1) { this.setState({ levelStarted: false, final: true }); return -1 }\n        else {\n            this.setState((state) => ({ level: state.level + 1, levelStarted: true, final: false }));\n            this.fetchWords(level)\n        }\n    }\n\n    async fetchWords(level) {\n        try {\n            var totalWords = level * 3\n            var wrongWords = totalWords / 3\n            let response = await (fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`));\n            let data = await response.json();\n            this.handleStrings(data)\n        } catch (err) { this.setState({ errors: true, }) }\n    }\n    handleStrings(lst) {\n        var correctWordList = []\n        var wrongWordList = []\n        lst.map(function (word) {\n            // The words that ends with :C are the correct ones.\n            if (word.slice(-2) == ':C') {\n                let wordToPush = word.slice(0, word.length - 2)\n                correctWordList.push(wordToPush)\n            } else { wrongWordList.push(word) }\n        })\n        this.setState({ correctWordList: correctWordList, wrongWordList: wrongWordList })\n        this.handleLists()\n    }\n\n    handleLists() {\n        const { wrongWordList, correctWordList, level } = this.state\n        // In the first stage we are giving the list correctWordList as wordList\n        this.setState({ wordList: correctWordList })\n        // For each level there will be more words to memorize so we have to multiply by level.\n        var waitSeconds = level * 3000\n        var wordList = correctWordList.concat(wrongWordList)\n        wordList = wordList.sort(() => Math.random() - 0.5);\n        // When the timer ends wordList will be the concatenation of correctWordList and wrongWordList in shuffled list\n        setTimeout(() => { this.setState({ wordList: wordList, memorizingEnded: true }) }, waitSeconds);\n        this.Countdown(waitSeconds / 1000)\n    }\n\n    handleCorrectAnswers(e) {\n        const { wrongWordList, wrongWordCount, score } = this.state\n\n        // Disabling the button so the player doesn't click the button more than 1\n        if (e.target.id == \"used\") { return -1 }\n        // Looping through the list to check if the answer is in the wrongWordList\n        var isWordInTheList = false\n        \n        for (let i = 0; i < wrongWordList.length; i++) {\n            if (e.target.innerHTML == wrongWordList[i]) { isWordInTheList = true }\n        }\n        var clickEffectAudio = document.getElementById('clickEffect')\n        \n        // If the answer is correct\n        if (isWordInTheList) {\n            e.target.className = \"btn btn-lg btn-success text-white mr-2 mt-3 \";\n            e.target.id = \"used\";\n            // Callback function to check if the game is ended\n            this.setState((state) => ({ score: state.score + 10, wrongWordCount: state.wrongWordCount - 1 }), () => {\n                this.isLevelEnded()\n            });\n        }\n        else {\n            e.target.className = \"btn btn-lg btn-danger text-white mr-2 mt-3\";\n            e.target.id = \"used\";\n            this.setState((state) => ({ score: state.score - 10 }));\n        }\n        // If wrongWordList's length + (-wrongWordCount) is equal to 0 that means there is no words to choose anymore.\n        if (wrongWordList.length + wrongWordCount == 0) { this.setState({ levelStarted: false, memorizingEnded: true, wrongWordCount: 0 }) }\n        clickEffectAudio.play()\n    }\n\n    isLevelEnded() {\n        const { wrongWordList, wrongWordCount } = this.state\n        // If wrongWordList which is the correct answer list for our game length + \n        // (-wrongWordCount) is equal to 0, that means there is no correct word to choose\n        // anymore. So we end the level. \n        if (wrongWordList.length + wrongWordCount == 0) {\n            setTimeout(() => {\n                this.setState({ levelStarted: false, memorizingEnded: false, wrongWordCount: 0, wordList: [] })\n            }, 500);\n        }\n    }\n\n    render() {\n        const { errors, wordList, level, score, levelStarted, memorizingEnded, final } = this.state\n        const { nickname } = this.props\n        \n        // debugging\n        //console.log('Final:' + this.state.final + ', levelStarted:' + this.state.levelStarted + ', memorizingEnded:' + this.state.memorizingEnded + \", level:\" + this.state.level + ' score:', this.state.score)\n        \n        // If the game is started don't display the next level button\n        if (levelStarted) {\n\n            buttonElement = <></>\n            var wordsToMemorize = (\n                <div className=\"mt-5\">\n                    <h3 className=\"text-white\">Try to memorize!</h3>\n                    <hr className=\"separator\" />\n                    <div className=\"wordsToMemorize\">\n                        {wordList.map(function (word, index) {\n                            // if index is equal to wordlist's length minus 1 that means word is the last element so we don't need the put coma.\n                            return (<strong key={index}><h3 className=\"text-white d-inline\" >{word}{index != wordList.length - 1 ? <>, </> : <></>}</h3></strong>)\n                        })}\n                    </div>\n                </div>\n            )\n            var endQuestions = (\n                <div className=\"mt-5\">\n                    <h3 className=\"text-white\">What word didn't shown?</h3>\n                    <div>\n                        {wordList.map((word, index) => {\n                            return (<button className=\"btn btn-lg btn-info text-white mr-2 mt-3\" key={index} onClick={(e) => this.handleCorrectAnswers(e)}>\n                                {word}\n                            </button>)\n                        })}\n                    </div>\n                </div>\n            )\n        }\n        else if (!levelStarted && !final) {\n            if (level == 1) {\n                var buttonElement = (<><h3 className=\"text-white\">Click the button if you want to start.</h3><button style={{ width: \"200px\" }} className=\"btn btn-lg btn-danger text-white mt-3\" onClick={() => this.handleNextLevel()}><VscDebugStart /> START</button></>)\n            } else {\n\n                var buttonElement = (<button style={{ width: \"200px\" }} className=\"btn btn-lg btn-success text-white mt-5\" onClick={() => this.handleNextLevel()}><VscDebugStart /> NEXT LEVEL</button>)\n            }\n        }\n\n        if (!errors) {\n            var waitSeconds = level * 3\n            if (final) {\n                return (\n                    <div >\n                        <h3  className=\"text-white mt-5\">Congratulations, you have finished the challange!</h3>\n                        <h1 className=\"text-white mt-3 mb-3\">Your Score: {score}</h1>\n                        <div className=\"mt-4 mb-4\">\n                            <FacebookShareButton className=\"mr-3\"\n                                url={`${this.props.websiteUrl}`}\n                                quote={`I got ${score} score in Memory Challange!`}\n                                hashtag=\"#memorychallange\">\n                                <FacebookIcon size={50} />\n                            </FacebookShareButton>\n\n                            <TwitterShareButton\n                                url={`${this.props.websiteUrl}`}\n                                quote={`I got ${score} score in Memory Challange!`}\n                                hashtag=\"#memorychallange\">\n                                <TwitterIcon size={50} />\n                            </TwitterShareButton>\n                        </div>\n\n\n                        <button onClick={() => window.location.reload(false)} style={{ width: \"200px\" }} className=\"btn btn-lg btn-success text-white\"><VscDebugRestart /> PLAY AGAIN</button>\n                    </div>\n                )\n            }\n            return (\n                \n                <div className=\"mt-2\">\n                    <audio type=\"audio/mpeg\" id=\"clickEffect\" src={clickeffect}></audio>\n                    <div className=\"row mt-5\">\n                        <div className=\"col\">\n                            <h3 className=\"text-white\" >{level - 1 != 0 ? <strong> Level: {level - 1} </strong> : <></>}</h3>\n                        </div>\n                        <div className=\"col\">\n                            <h3 className=\"text-white\">{level - 1 != 0 ? <strong>Time: <span id=\"countdown\">{waitSeconds}</span><span id=\"plural\"> seconds</span></strong> : <></>}</h3>\n                        </div>\n                        <div className=\"col\">\n                            <h3 className=\"text-white\">{level - 1 != 0 ? <strong> Score: {score} </strong> : <></>}</h3>\n                        </div>\n                    </div>\n                    <div className=\"container\">\n                        {memorizingEnded ? endQuestions : wordsToMemorize}\n                        <div >\n                            {buttonElement}\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n\n        if (errors) {\n            return (\n                <div className=\"mt-5\">\n                    <div className=\"mt-5\">\n                        <h3 className=\"text-white text-center mt-5\">Something is wrong. Please try again.</h3>\n                        <button onClick={() => window.location.reload(false)} style={{ width: \"200px\" }} className=\"btn btn-lg btn-success text-white mt-3\"><VscDebugRestart /> TRY AGAIN</button>\n                    </div>\n                </div>\n\n            )\n        }\n    }\n}\n\nexport default Game\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Game from './components/Game'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {HiCode} from 'react-icons/hi'\nimport {BiLinkExternal} from 'react-icons/bi'\n\n\nexport class App extends Component {\n  render() {\n    const websiteUrl = 'http://localhost:8000/'\n    return (\n      <div className=\"App\">\n        <div>\n          <strong><h1 className=\"gameHeader mt-4 mb-4 text-white\">\n            MEMORY CHALLANGE \n              <span>\n              <h5 className=\"text-white\">Created by <a className=\"text-warning\" href=\"http://berkgaffaroglu.com/\" target=\"_blank\"><BiLinkExternal />Berk Gaffaroglu</a>\n              </h5>\n              </span>\n          </h1></strong>\n        </div>\n\n        <div className=\"container wrapper\">\n          <Router>\n            <Switch>\n              <Route path=\"/\" component={(props) => <Game websiteUrl={websiteUrl} />} />\n            </Switch>\n          </Router>\n        </div>\n        <button onClick={()=> window.open(\"https://github.com/berkgaffaroglu/memorychallange\", \"_blank\")} style={{fontFamily:\"ConcertOne\", minWidth:\"250px\"}} className=\"btn btn-lg bg-dark text-white mb-4 mt-4\"><b><HiCode /> THE CODE</b></button>\n        <footer className=\"footer sticky-bottom text-white text-center\">\n          <div>\n            <span style={{ fontFamily: \"Oswald\" }}>Powered by <a style={{ color: \"#c2f2cf\" }} href=\"https://www.django-rest-framework.org/\" target=\"_blank\">Django Rest API</a> & <a style={{ color: \"#c2f2cf\" }} href=\"https://reactjs.org/\" target=\"_blank\">React.js</a>\n            </span>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}