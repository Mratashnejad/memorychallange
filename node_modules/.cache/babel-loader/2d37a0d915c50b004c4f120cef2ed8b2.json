{"ast":null,"code":"var _jsxFileName = \"/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js\";\nimport React, { Component } from 'react';\nimport Game from './Game';\nexport class FetchRandomWords extends Component {\n  constructor(props) {\n    super(props); // initializing the variables that I am going to use later.\n\n    this.state = {\n      level: 0,\n      randomWords: [],\n      correctWordList: [],\n      wrongWordList: [],\n      start: true,\n      Render: false,\n      errors: false,\n      score: 0\n    };\n    this.fetchRandomWords = this.fetchRandomWords.bind(this);\n  }\n\n  async fetchRandomWords(level) {\n    try {\n      var totalWords = level * 4;\n      var wrongWords = totalWords / 4;\n      let response = await fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`);\n      let data = await response.json();\n      this.setState({\n        // Rendering if the response that is coming from the API is okay.\n        Render: true\n      });\n      this.handleCorrectAnswer(data); // If there is any error handle it by changing the state Render:false and errors:true.\n    } catch (err) {\n      this.setState({\n        errors: true,\n        Render: false\n      });\n    }\n  } // Helper function to divide the list by correct ones and wrong ones.\n\n\n  handleCorrectAnswer(lst) {\n    var correctWordList = [];\n    var wrongWordList = [];\n    lst.map(function (word) {\n      // The words that ends with :C are the correct ones.\n      if (word.slice(-2) == ':C') {\n        let wordToPush = word.slice(0, word.length - 2);\n        correctWordList.push(wordToPush);\n      } else {\n        wrongWordList.push(word);\n      }\n    });\n    this.setState({\n      correctWordList: correctWordList,\n      wrongWordList: wrongWordList\n    });\n  }\n\n  componentDidMount() {\n    // Fetching the data before render.\n    this.fetchRandomWords(1);\n    this.handleCorrectAnswer(this.state.randomWords);\n  }\n\n  handleNextLevel() {\n    this.setState({\n      level: this.state.level + 1\n    });\n    this.fetchRandomWords(this.state.level);\n  }\n\n  render() {\n    const {\n      Render,\n      errors,\n      randomWords,\n      correctWordList,\n      wrongWordList,\n      level\n    } = this.state; // Rendering the data if this.state.Render is true as we set.\n\n    if (Render) {\n      return (\n        /*#__PURE__*/\n        // Passing the correct word list and wrong word list to handle the game in another component so the this component doesnt\n        // get too complex and messy.\n        React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }\n        }, this.state.level), this.state.level == 0 ? /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.handleNextLevel,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 38\n          }\n        }, \"Start\") : /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.handleNextLevel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 100\n          }\n        }, \"Next Level\"))\n      );\n    } // If the data is taken too much time to load display a spinning animation.\n    else if (Render == false) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \"Wait\");\n      } // Error handling\n      else if (errors) {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, \"Something is wrong. Please try again.\");\n        }\n  }\n\n}\nexport default FetchRandomWords;","map":{"version":3,"sources":["/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js"],"names":["React","Component","Game","FetchRandomWords","constructor","props","state","level","randomWords","correctWordList","wrongWordList","start","Render","errors","score","fetchRandomWords","bind","totalWords","wrongWords","response","fetch","websiteUrl","data","json","setState","handleCorrectAnswer","err","lst","map","word","slice","wordToPush","length","push","componentDidMount","handleNextLevel","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,MAAMC,gBAAN,SAA+BF,SAA/B,CAAyC;AAC5CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAC,CADG;AAETC,MAAAA,WAAW,EAAE,EAFJ;AAGTC,MAAAA,eAAe,EAAE,EAHR;AAITC,MAAAA,aAAa,EAAE,EAJN;AAKTC,MAAAA,KAAK,EAAC,IALG;AAMTC,MAAAA,MAAM,EAAE,KANC;AAOTC,MAAAA,MAAM,EAAE,KAPC;AAQTC,MAAAA,KAAK,EAAE;AARE,KAAb;AAYA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACH;;AACD,QAAMD,gBAAN,CAAuBR,KAAvB,EAA8B;AAC1B,QAAI;AACA,UAAIU,UAAU,GAAGV,KAAK,GAAG,CAAzB;AACA,UAAIW,UAAU,GAAGD,UAAU,GAAG,CAA9B;AACA,UAAIE,QAAQ,GAAG,MAAOC,KAAK,CAAC,KAAKf,KAAL,CAAWgB,UAAX,GAAyB,8BAA6BJ,UAAW,UAASC,UAAW,EAAtF,CAA3B;AACA,UAAII,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAjB;AACA,WAAKC,QAAL,CAAc;AACV;AACAZ,QAAAA,MAAM,EAAE;AAFE,OAAd;AAIA,WAAKa,mBAAL,CAAyBH,IAAzB,EATA,CAWA;AACH,KAZD,CAYE,OAAOI,GAAP,EAAY;AACV,WAAKF,QAAL,CAAc;AACVX,QAAAA,MAAM,EAAE,IADE;AAEVD,QAAAA,MAAM,EAAE;AAFE,OAAd;AAIH;AAEJ,GAtC2C,CAuC5C;;;AACAa,EAAAA,mBAAmB,CAACE,GAAD,EAAM;AACrB,QAAIlB,eAAe,GAAG,EAAtB;AACA,QAAIC,aAAa,GAAG,EAApB;AACAiB,IAAAA,GAAG,CAACC,GAAJ,CAAQ,UAASC,IAAT,EAAc;AAClB;AAEA,UAAGA,IAAI,CAACC,KAAL,CAAW,CAAC,CAAZ,KAAkB,IAArB,EAA2B;AACvB,YAAIC,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAW,CAAX,EAAcD,IAAI,CAACG,MAAL,GAAc,CAA5B,CAAjB;AACAvB,QAAAA,eAAe,CAACwB,IAAhB,CAAqBF,UAArB;AACH,OAHD,MAGO;AACHrB,QAAAA,aAAa,CAACuB,IAAd,CAAmBJ,IAAnB;AACH;AACJ,KATD;AAUA,SAAKL,QAAL,CAAc;AACVf,MAAAA,eAAe,EAAEA,eADP;AAEVC,MAAAA,aAAa,EAAEA;AAFL,KAAd;AAKH;;AACDwB,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKnB,gBAAL,CAAsB,CAAtB;AACA,SAAKU,mBAAL,CAAyB,KAAKnB,KAAL,CAAWE,WAApC;AACH;;AAED2B,EAAAA,eAAe,GAAG;AACd,SAAKX,QAAL,CAAc;AACVjB,MAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AADhB,KAAd;AAGA,SAAKQ,gBAAL,CAAsB,KAAKT,KAAL,CAAWC,KAAjC;AACH;;AAGD6B,EAAAA,MAAM,GAAG;AACL,UAAM;AAAExB,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBL,MAAAA,WAAlB;AAA+BC,MAAAA,eAA/B;AAAgDC,MAAAA,aAAhD;AAA+DH,MAAAA;AAA/D,QAAyE,KAAKD,KAApF,CADK,CAEL;;AACA,QAAIM,MAAJ,EAAY;AACR;AAAA;AACI;AACA;AACA,+DACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,KAAKN,KAAL,CAAWC,KAAhB,CADA,EAEH,KAAKD,KAAL,CAAWC,KAAX,IAAoB,CAApB,gBAAwB;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAK4B,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAxB,gBAAsF;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKA,eAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFnF;AAHJ;AAUH,KAXD,CAYA;AAZA,SAaK,IAAIvB,MAAM,IAAI,KAAd,EAAqB;AACtB,4BACI,iDADJ;AAGH,OAJI,CAKL;AALK,WAMA,IAAIC,MAAJ,EAAY;AACb,8BACI,kFADJ;AAGH;AACJ;;AApG2C;AAuGhD,eAAeV,gBAAf","sourcesContent":["import React, { Component } from 'react'\nimport Game from './Game'\nexport class FetchRandomWords extends Component {\n    constructor(props) {\n        super(props)\n        // initializing the variables that I am going to use later.\n        this.state = {\n            level:0,\n            randomWords: [],\n            correctWordList: [],\n            wrongWordList: [],\n            start:true,\n            Render: false,\n            errors: false,\n            score: 0\n           \n            \n        }\n        this.fetchRandomWords = this.fetchRandomWords.bind(this)\n    }\n    async fetchRandomWords(level) {\n        try {\n            var totalWords = level * 4\n            var wrongWords = totalWords / 4\n            let response = await (fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`));\n            let data = await response.json();\n            this.setState({\n                // Rendering if the response that is coming from the API is okay.\n                Render: true\n            })\n            this.handleCorrectAnswer(data)\n\n            // If there is any error handle it by changing the state Render:false and errors:true.\n        } catch (err) {\n            this.setState({\n                errors: true,\n                Render: false\n            })\n        }\n\n    }\n    // Helper function to divide the list by correct ones and wrong ones.\n    handleCorrectAnswer(lst) {\n        var correctWordList = []\n        var wrongWordList = [] \n        lst.map(function(word){\n            // The words that ends with :C are the correct ones.\n            \n            if(word.slice(-2) == ':C') {\n                let wordToPush = word.slice(0, word.length - 2)\n                correctWordList.push(wordToPush)\n            } else {\n                wrongWordList.push(word)\n            }\n        })\n        this.setState({\n            correctWordList: correctWordList,\n            wrongWordList: wrongWordList\n        })\n\n    }\n    componentDidMount() {\n        // Fetching the data before render.\n        this.fetchRandomWords(1)\n        this.handleCorrectAnswer(this.state.randomWords)\n    }\n\n    handleNextLevel() {\n        this.setState({\n            level: this.state.level + 1\n        })\n        this.fetchRandomWords(this.state.level)\n    }\n\n\n    render() {\n        const { Render, errors, randomWords, correctWordList, wrongWordList, level } = this.state\n        // Rendering the data if this.state.Render is true as we set.\n        if (Render) {\n            return (\n                // Passing the correct word list and wrong word list to handle the game in another component so the this component doesnt\n                // get too complex and messy.\n                <>\n                <h1>{this.state.level}</h1>\n            {this.state.level == 0 ? <button onClick={() => this.handleNextLevel}>Start</button> : <button onClick={() =>Â this.handleNextLevel()}>Next Level</button> }\n                \n\n                </>\n            )\n        }\n        // If the data is taken too much time to load display a spinning animation.\n        else if (Render == false) {\n            return (\n                <>Wait</>\n            )\n        }\n        // Error handling\n        else if (errors) {\n            return (\n                <>Something is wrong. Please try again.</>\n            )\n        }\n    }\n}\n\nexport default FetchRandomWords\n"]},"metadata":{},"sourceType":"module"}