{"ast":null,"code":"var _jsxFileName = \"/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js\";\nimport React, { Component } from 'react';\nimport Game from './Game';\nexport class FetchRandomWords extends Component {\n  constructor(props) {\n    super(props); // initializing the variables that I am going to use later.\n\n    this.state = {\n      level: 1,\n      score: 0,\n      speed: 1,\n      wordList: [],\n      correctWordList: [],\n      wrongWordList: [],\n      gameStarted: false,\n      errors: false\n    };\n    this.fetchRandomWords = this.fetchRandomWords.bind(this);\n    this.gameLogic = this.gameLogic.bind(this);\n    this.handleNextLevel = this.handleNextLevel.bind(this);\n  }\n\n  gameLogic() {\n    var correctWordList = this.state.correctWordList;\n    var wrongWordList = this.state.wrongWordList;\n    var wordList = correctWordList.concat(wrongWordList);\n    wordList = wordList.sort(() => Math.random() - 0.5);\n    this.setState({\n      wordList: wordList\n    });\n    setTimeout(() => {\n      this.setState({\n        gameStarted: false\n      });\n    }, this.state.level * 1000 * 4 / this.state.speed);\n  } // Helper function to divide the list by correct ones and wrong ones.\n\n\n  handleCorrectAnswer(lst) {\n    var correctWordList = [];\n    var wrongWordList = [];\n    lst.map(function (word) {\n      // The words that ends with :C are the correct ones.\n      if (word.slice(-2) == ':C') {\n        let wordToPush = word.slice(0, word.length - 2);\n        correctWordList.push(wordToPush);\n      } else {\n        wrongWordList.push(word);\n      }\n    });\n    this.setState({\n      correctWordList: correctWordList,\n      wrongWordList: wrongWordList\n    });\n    this.gameLogic();\n  }\n\n  async fetchRandomWords(level) {\n    try {\n      var totalWords = level * 4;\n      var wrongWords = totalWords / 4;\n      let response = await fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`);\n      let data = await response.json(); // We are seperating the words by their last 2 character which is \":C\"\n\n      this.handleCorrectAnswer(data); // If there is any error handle it by changing the state errors:true.\n    } catch (err) {\n      this.setState({\n        errors: true\n      });\n    }\n  }\n\n  handleNextLevel() {\n    this.setState(state => ({\n      level: state.level + 1,\n      gameStarted: true\n    }));\n    console.log(this.state.level);\n    this.fetchRandomWords(this.state.level);\n  }\n\n  render() {\n    const {\n      errors,\n      wordList,\n      level\n    } = this.state; // If level is 0 display start button else display next level button\n\n    if (this.state.gameStarted == false) {\n      if (level == 1) {\n        var buttonElement = /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.handleNextLevel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }\n        }, \"Start\");\n      } else {\n        var buttonElement = /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.handleNextLevel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }\n        }, \"Next level\");\n      }\n    } // If the game is started don't display the next level button\n    else {\n        var buttonElement = /*#__PURE__*/React.createElement(React.Fragment, null);\n      }\n\n    if (!errors) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      }, level - 1 != 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, \" Level: \", level - 1, \" \") : /*#__PURE__*/React.createElement(React.Fragment, null)), wordList, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }), buttonElement);\n    } // Error handling\n    else if (errors) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \"Something is wrong. Please try again.\");\n      }\n  }\n\n}\nexport default FetchRandomWords;","map":{"version":3,"sources":["/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js"],"names":["React","Component","Game","FetchRandomWords","constructor","props","state","level","score","speed","wordList","correctWordList","wrongWordList","gameStarted","errors","fetchRandomWords","bind","gameLogic","handleNextLevel","concat","sort","Math","random","setState","setTimeout","handleCorrectAnswer","lst","map","word","slice","wordToPush","length","push","totalWords","wrongWords","response","fetch","websiteUrl","data","json","err","console","log","render","buttonElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Game from './Game'\nexport class FetchRandomWords extends Component {\n    constructor(props) {\n        super(props)\n        // initializing the variables that I am going to use later.\n        this.state = {\n            level: 1,\n            score: 0,\n            speed:1,\n            wordList: [],\n            correctWordList: [],\n            wrongWordList: [],\n            gameStarted: false,\n            errors: false,\n\n            \n        }\n        this.fetchRandomWords = this.fetchRandomWords.bind(this)\n        this.gameLogic = this.gameLogic.bind(this)\n        this.handleNextLevel = this.handleNextLevel.bind(this)\n    }\n\n    gameLogic() {\n\n        var correctWordList = this.state.correctWordList\n        var wrongWordList = this.state.wrongWordList\n        var wordList = correctWordList.concat(wrongWordList)\n        wordList = wordList.sort(() => Math.random() - 0.5);\n        this.setState({\n            wordList: wordList\n        })\n        setTimeout(() => {\n            this.setState({\n                gameStarted: false\n            })\n        }, this.state.level*1000*4/this.state.speed);\n\n    }\n\n    // Helper function to divide the list by correct ones and wrong ones.\n    handleCorrectAnswer(lst) {\n        var correctWordList = []\n        var wrongWordList = []\n        lst.map(function (word) {\n            // The words that ends with :C are the correct ones.\n            if (word.slice(-2) == ':C') {\n                let wordToPush = word.slice(0, word.length - 2)\n                correctWordList.push(wordToPush)\n            } else {\n                wrongWordList.push(word)\n            }\n        })\n        this.setState({\n            correctWordList: correctWordList,\n            wrongWordList: wrongWordList\n        })\n        this.gameLogic()\n\n    }\n\n    async fetchRandomWords(level) {\n        try {\n            var totalWords = level * 4\n            var wrongWords = totalWords / 4\n            let response = await (fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`));\n            let data = await response.json();\n\n            // We are seperating the words by their last 2 character which is \":C\"\n            this.handleCorrectAnswer(data)\n\n            // If there is any error handle it by changing the state errors:true.\n        } catch (err) {\n            this.setState({\n                errors: true,\n            })\n        }\n\n    }\n\n    handleNextLevel() {\n\n        this.setState((state) => ({\n            level: state.level + 1,\n            gameStarted: true\n        }));\n\n        console.log(this.state.level)\n        this.fetchRandomWords(this.state.level)\n\n    }\n\n    render() {\n        const { errors, wordList, level } = this.state\n        // If level is 0 display start button else display next level button\n        if (this.state.gameStarted == false) {\n            if (level == 1) {\n                var buttonElement = (\n                    <button onClick={() => this.handleNextLevel()}>Start</button>\n                )\n            } else {\n                var buttonElement = (\n                    <button onClick={() => this.handleNextLevel()}>Next level</button>\n                )\n            }\n        }\n        // If the game is started don't display the next level button\n        else {\n            var buttonElement = (\n                <></>\n            )\n        }\n\n        if (!errors) {\n            return (\n                <>\n                    <h1>{level-1 != 0 ? <> Level: {level-1} </> : <></>}</h1>\n                    {wordList}\n                    <br />\n                    {buttonElement}\n                </>\n            )\n        }\n\n        // Error handling\n        else if (errors) {\n            return (\n                <>Something is wrong. Please try again.</>\n            )\n        }\n    }\n}\n\nexport default FetchRandomWords\n"]},"metadata":{},"sourceType":"module"}