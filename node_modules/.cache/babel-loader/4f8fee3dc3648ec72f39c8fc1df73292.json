{"ast":null,"code":"var _jsxFileName = \"/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js\";\nimport React, { Component } from 'react';\nimport Game from './Game';\nexport class FetchRandomWords extends Component {\n  constructor(props) {\n    super(props); // initializing the variables that I am going to use later.\n\n    this.state = {\n      level: 0,\n      randomWords: [],\n      correctWordList: [],\n      wrongWordList: [],\n      gameStarted: false,\n      Render: true,\n      errors: false,\n      score: 0\n    };\n    this.fetchRandomWords = this.fetchRandomWords.bind(this);\n  }\n\n  async fetchRandomWords(level) {\n    try {\n      var totalWords = level * 4;\n      var wrongWords = totalWords / 4;\n      let response = await fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`);\n      let data = await response.json(); // We are seperating the words by their last 2 character which is \":C\"\n\n      this.handleCorrectAnswer(data); // If there is any error handle it by changing the state errors:true.\n    } catch (err) {\n      this.setState({\n        errors: true\n      });\n    }\n  } // Helper function to divide the list by correct ones and wrong ones.\n\n\n  handleCorrectAnswer(lst) {\n    var correctWordList = [];\n    var wrongWordList = [];\n    lst.map(function (word) {\n      // The words that ends with :C are the correct ones.\n      if (word.slice(-2) == ':C') {\n        let wordToPush = word.slice(0, word.length - 2);\n        correctWordList.push(wordToPush);\n      } else {\n        wrongWordList.push(word);\n      }\n    });\n    this.setState({\n      correctWordList: correctWordList,\n      wrongWordList: wrongWordList\n    });\n  }\n\n  componentDidMount() {\n    // Fetching the data before render.\n    this.handleCorrectAnswer(this.state.randomWords);\n  }\n\n  handleNextLevel() {\n    this.setState({\n      level: this.state.level + 1,\n      gameStarted: true\n    }, console.log(this.state.gameStarted));\n    this.fetchRandomWords(this.state.level);\n  }\n\n  render() {\n    const {\n      Render,\n      errors,\n      randomWords,\n      correctWordList,\n      wrongWordList,\n      level\n    } = this.state; // Rendering the data if this.state.Render is true as we set.\n\n    if (this.state.gameStarted == false) {\n      if (this.state.level == 0) {\n        var buttonElement = /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.handleNextLevel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }\n        }, \"Start\");\n      } else {\n        var buttonElement = /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.handleNextLevel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }\n        }, \"Next level\");\n      }\n    } else {\n      var buttonElement = /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (Render) {\n      return (\n        /*#__PURE__*/\n        // Passing the correct word list and wrong word list to handle the game in another component so the this component doesnt\n        // get too complex and messy.\n        React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }\n        }, \"Level: \", this.state.level != 0 ? this.state.level : /*#__PURE__*/React.createElement(React.Fragment, null)), buttonElement)\n      );\n    } // Error handling\n    else if (errors) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \"Something is wrong. Please try again.\");\n      }\n  }\n\n}\nexport default FetchRandomWords;","map":{"version":3,"sources":["/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js"],"names":["React","Component","Game","FetchRandomWords","constructor","props","state","level","randomWords","correctWordList","wrongWordList","gameStarted","Render","errors","score","fetchRandomWords","bind","totalWords","wrongWords","response","fetch","websiteUrl","data","json","handleCorrectAnswer","err","setState","lst","map","word","slice","wordToPush","length","push","componentDidMount","handleNextLevel","console","log","render","buttonElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Game from './Game'\nexport class FetchRandomWords extends Component {\n    constructor(props) {\n        super(props)\n        // initializing the variables that I am going to use later.\n        this.state = {\n            level: 0,\n            randomWords: [],\n            correctWordList: [],\n            wrongWordList: [],\n            gameStarted: false,\n            Render: true,\n            errors: false,\n            score: 0\n\n\n        }\n        this.fetchRandomWords = this.fetchRandomWords.bind(this)\n    }\n    async fetchRandomWords(level) {\n        try {\n            var totalWords = level * 4\n            var wrongWords = totalWords / 4\n            let response = await (fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`));\n            let data = await response.json();\n            // We are seperating the words by their last 2 character which is \":C\"\n            this.handleCorrectAnswer(data)\n\n            // If there is any error handle it by changing the state errors:true.\n        } catch (err) {\n            this.setState({\n                errors: true,\n            })\n        }\n\n    }\n    // Helper function to divide the list by correct ones and wrong ones.\n    handleCorrectAnswer(lst) {\n        var correctWordList = []\n        var wrongWordList = []\n        lst.map(function (word) {\n            // The words that ends with :C are the correct ones.\n\n            if (word.slice(-2) == ':C') {\n                let wordToPush = word.slice(0, word.length - 2)\n                correctWordList.push(wordToPush)\n            } else {\n                wrongWordList.push(word)\n            }\n        })\n        this.setState({\n            correctWordList: correctWordList,\n            wrongWordList: wrongWordList\n        })\n\n    }\n    componentDidMount() {\n        // Fetching the data before render.\n        this.handleCorrectAnswer(this.state.randomWords)\n    }\n\n    handleNextLevel() {\n        this.setState({\n            level: this.state.level + 1,\n            gameStarted: true\n        }, console.log(this.state.gameStarted))\n        this.fetchRandomWords(this.state.level)\n    }\n\n\n    render() {\n        const { Render, errors, randomWords, correctWordList, wrongWordList, level } = this.state\n        // Rendering the data if this.state.Render is true as we set.\n\n        if (this.state.gameStarted == false) {\n            if (this.state.level == 0) {\n                var buttonElement = (\n                    <button onClick={() => this.handleNextLevel()}>Start</button>\n                )\n            } else {\n                var buttonElement = (\n                    <button onClick={() => this.handleNextLevel()}>Next level</button>\n                )\n            }\n        }\n        else {\n            var buttonElement = (\n                <></>\n            )\n        }\n        if (Render) {\n            return (\n                // Passing the correct word list and wrong word list to handle the game in another component so the this component doesnt\n                // get too complex and messy.\n                <>\n                    <h1>Level: {this.state.level != 0 ? this.state.level : <></>}</h1>\n                    {buttonElement}\n                </>\n            )\n        }\n        // Error handling\n        else if (errors) {\n            return (\n                <>Something is wrong. Please try again.</>\n            )\n        }\n    }\n}\n\nexport default FetchRandomWords\n"]},"metadata":{},"sourceType":"module"}