{"ast":null,"code":"var _jsxFileName = \"/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js\";\nimport React, { Component } from 'react';\nexport class FetchRandomWords extends Component {\n  constructor(props) {\n    super(props); // initializing the variables that I am going to use later.\n\n    this.state = {\n      randomWords: [],\n      correctWordList: [],\n      wrongWordList: [],\n      Render: false,\n      errors: false,\n      level: 0\n    };\n  }\n\n  async fetchRandomWords(level) {\n    try {\n      var totalWords = level * 4;\n      var wrongWords = totalWords / 4;\n      let response = await fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`);\n      let data = await response.json();\n      this.setState({\n        // Rendering if the response that is coming from the API is okay.\n        Render: true\n      });\n      this.handleCorrectAnswer(data); // If there is any error handle it by changing the state Render:false and errors:true\n    } catch (err) {\n      this.setState({\n        errors: true,\n        Render: false\n      });\n    }\n  }\n\n  handleCorrectAnswer(lst) {\n    var correctWordList = [];\n    var wrongWordList = [];\n    lst.map(function (word) {\n      // The words that ends with :C are the correct ones.\n      let wordToPush = word.slice(0, word.length - 2);\n\n      if (word.slice(-2) == ':C') {\n        correctWordList.push(wordToPush);\n      } else {\n        wrongWordList.push(wordToPush);\n      }\n    });\n    this.setState({\n      correctWordList: correctWordList,\n      wrongWordList: wrongWordList\n    });\n  }\n\n  componentWillMount() {\n    // Fetching the data before render \n    this.fetchRandomWords(1);\n    this.handleCorrectAnswer(this.state.randomWords);\n    console.log(this.state.correctWordList);\n  }\n\n  render() {\n    const {\n      Render,\n      errors,\n      randomWords,\n      correctWordList,\n      wrongWordList\n    } = this.state; // Rendering the data if this.state.Render is true as we set.\n\n    if (Render) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      }, randomWords.map(function (word, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }\n        }, word);\n      }), correctWordList, /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }, wrongWordList));\n    } // If the data is taken too much time to load display a spinning animation\n    else if (Render == false) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \"Wait\");\n      } // Error handling\n      else if (errors) {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, \"Something is wrong. Please try again.\");\n        }\n  }\n\n}\nexport default FetchRandomWords;","map":{"version":3,"sources":["/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js"],"names":["React","Component","FetchRandomWords","constructor","props","state","randomWords","correctWordList","wrongWordList","Render","errors","level","fetchRandomWords","totalWords","wrongWords","response","fetch","websiteUrl","data","json","setState","handleCorrectAnswer","err","lst","map","word","wordToPush","slice","length","push","componentWillMount","console","log","render","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,gBAAN,SAA+BD,SAA/B,CAAyC;AAC5CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,eAAe,EAAE,EAFR;AAGTC,MAAAA,aAAa,EAAE,EAHN;AAITC,MAAAA,MAAM,EAAE,KAJC;AAKTC,MAAAA,MAAM,EAAE,KALC;AAMTC,MAAAA,KAAK,EAAE;AANE,KAAb;AAQH;;AACD,QAAMC,gBAAN,CAAuBD,KAAvB,EAA8B;AAC1B,QAAI;AACA,UAAIE,UAAU,GAAGF,KAAK,GAAG,CAAzB;AACA,UAAIG,UAAU,GAAGD,UAAU,GAAG,CAA9B;AACA,UAAIE,QAAQ,GAAG,MAAOC,KAAK,CAAC,KAAKZ,KAAL,CAAWa,UAAX,GAAyB,8BAA6BJ,UAAW,UAASC,UAAW,EAAtF,CAA3B;AACA,UAAII,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAjB;AACA,WAAKC,QAAL,CAAc;AACV;AACAX,QAAAA,MAAM,EAAE;AAFE,OAAd;AAIA,WAAKY,mBAAL,CAAyBH,IAAzB,EATA,CAWA;AACH,KAZD,CAYE,OAAOI,GAAP,EAAY;AACV,WAAKF,QAAL,CAAc;AACVV,QAAAA,MAAM,EAAE,IADE;AAEVD,QAAAA,MAAM,EAAE;AAFE,OAAd;AAIH;AAEJ;;AACDY,EAAAA,mBAAmB,CAACE,GAAD,EAAM;AACrB,QAAIhB,eAAe,GAAG,EAAtB;AACA,QAAIC,aAAa,GAAG,EAApB;AACAe,IAAAA,GAAG,CAACC,GAAJ,CAAQ,UAASC,IAAT,EAAc;AAClB;AACA,UAAIC,UAAU,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcF,IAAI,CAACG,MAAL,GAAc,CAA5B,CAAjB;;AACA,UAAGH,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,KAAkB,IAArB,EAA2B;AAEvBpB,QAAAA,eAAe,CAACsB,IAAhB,CAAqBH,UAArB;AACH,OAHD,MAGO;AAEHlB,QAAAA,aAAa,CAACqB,IAAd,CAAmBH,UAAnB;AACH;AACJ,KAVD;AAWA,SAAKN,QAAL,CAAc;AACVb,MAAAA,eAAe,EAAEA,eADP;AAEVC,MAAAA,aAAa,EAAEA;AAFL,KAAd;AAKH;;AACDsB,EAAAA,kBAAkB,GAAG;AACjB;AACA,SAAKlB,gBAAL,CAAsB,CAAtB;AACA,SAAKS,mBAAL,CAAyB,KAAKhB,KAAL,CAAWC,WAApC;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK3B,KAAL,CAAWE,eAAvB;AACH;;AACD0B,EAAAA,MAAM,GAAG;AACL,UAAM;AAAExB,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBJ,MAAAA,WAAlB;AAA+BC,MAAAA,eAA/B;AAAgDC,MAAAA;AAAhD,QAAkE,KAAKH,KAA7E,CADK,CAEL;;AACA,QAAII,MAAJ,EAAY;AACR,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKH,WAAW,CAACkB,GAAZ,CAAgB,UAASC,IAAT,EAAcS,KAAd,EAAoB;AACjC,4BACI;AAAK,UAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAkBT,IAAlB,CADJ;AAGH,OAJA,CADL,EAMKlB,eANL,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIC,aAAJ,CAPJ,CADJ;AAWH,KAZD,CAaA;AAbA,SAcK,IAAIC,MAAM,IAAI,KAAd,EAAqB;AACtB,4BACI,iDADJ;AAGH,OAJI,CAKL;AALK,WAMA,IAAIC,MAAJ,EAAY;AACb,8BACI,kFADJ;AAGH;AACJ;;AAxF2C;AA2FhD,eAAeR,gBAAf","sourcesContent":["import React, { Component } from 'react'\n\nexport class FetchRandomWords extends Component {\n    constructor(props) {\n        super(props)\n        // initializing the variables that I am going to use later.\n        this.state = {\n            randomWords: [],\n            correctWordList: [],\n            wrongWordList: [],\n            Render: false,\n            errors: false,\n            level: 0\n        }\n    }\n    async fetchRandomWords(level) {\n        try {\n            var totalWords = level * 4\n            var wrongWords = totalWords / 4\n            let response = await (fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`));\n            let data = await response.json();\n            this.setState({\n                // Rendering if the response that is coming from the API is okay.\n                Render: true\n            })\n            this.handleCorrectAnswer(data)\n\n            // If there is any error handle it by changing the state Render:false and errors:true\n        } catch (err) {\n            this.setState({\n                errors: true,\n                Render: false\n            })\n        }\n\n    }\n    handleCorrectAnswer(lst) {\n        var correctWordList = []\n        var wrongWordList = [] \n        lst.map(function(word){\n            // The words that ends with :C are the correct ones.\n            let wordToPush = word.slice(0, word.length - 2)\n            if(word.slice(-2) == ':C') {\n                \n                correctWordList.push(wordToPush)\n            } else {\n                \n                wrongWordList.push(wordToPush)\n            }\n        })\n        this.setState({\n            correctWordList: correctWordList,\n            wrongWordList: wrongWordList\n        })\n\n    }\n    componentWillMount() {\n        // Fetching the data before render \n        this.fetchRandomWords(1)\n        this.handleCorrectAnswer(this.state.randomWords)\n        console.log(this.state.correctWordList)\n    }\n    render() {\n        const { Render, errors, randomWords, correctWordList, wrongWordList } = this.state\n        // Rendering the data if this.state.Render is true as we set.\n        if (Render) {\n            return (\n                <div>\n                    {randomWords.map(function(word,index){\n                        return(\n                            <div key={index}>{word}</div>\n                        )\n                    })}\n                    {correctWordList}\n                    <a>{wrongWordList}</a>\n                </div>\n            )\n        }\n        // If the data is taken too much time to load display a spinning animation\n        else if (Render == false) {\n            return (\n                <>Wait</>\n            )\n        }\n        // Error handling\n        else if (errors) {\n            return (\n                <>Something is wrong. Please try again.</>\n            )\n        }\n    }\n}\n\nexport default FetchRandomWords\n"]},"metadata":{},"sourceType":"module"}