{"ast":null,"code":"var _jsxFileName = \"/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js\";\nimport React, { Component } from 'react';\nimport Game from './Game';\nexport class FetchRandomWords extends Component {\n  constructor(props) {\n    super(props); // initializing the variables that I am going to use later.\n\n    this.state = {\n      wordList: [],\n      level: 0,\n      score: 0,\n      speed: 1,\n      correctWordList: [],\n      wrongWordList: [],\n      currentWord: '',\n      gameStarted: false,\n      endQuestions: false,\n      errors: false\n    };\n    this.fetchRandomWords = this.fetchRandomWords.bind(this);\n    this.handleNextLevel = this.handleNextLevel.bind(this);\n  } // Helper function to divide the list by correct ones and wrong ones.\n\n\n  handleCorrectAnswer(lst) {\n    var correctWordList = [];\n    var wrongWordList = [];\n    lst.map(function (word) {\n      // The words that ends with :C are the correct ones.\n      if (word.slice(-2) == ':C') {\n        let wordToPush = word.slice(0, word.length - 2);\n        correctWordList.push(wordToPush);\n      } else {\n        wrongWordList.push(word);\n      }\n    });\n    this.setState({\n      correctWordList: correctWordList,\n      wrongWordList: wrongWordList\n    });\n    var correctWordList = this.state.correctWordList;\n    var wrongWordList = this.state.wrongWordList;\n    this.setState({\n      wordList: correctWordList\n    }); //var wordList = correctWordList.concat(wrongWordList)\n    //wordList = wordList.sort(() => Math.random() - 0.5);\n  }\n\n  async fetchRandomWords(level) {\n    try {\n      var totalWords = level * 4;\n      var wrongWords = totalWords / 4;\n      var response = await fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`);\n      var data = await response.json(); // We are seperating the words by their last 2 character which is \":C\"\n\n      this.handleCorrectAnswer(data); // If there is any error handle it by changing the state errors:true.\n    } catch (err) {\n      this.setState({\n        errors: true\n      });\n    }\n  }\n\n  handleNextLevel() {\n    this.setState(prevState => ({\n      level: prevState.level + 1,\n      gameStarted: true,\n      endQuestions: false\n    }));\n    this.fetchRandomWords(this.state.level);\n  }\n\n  render() {\n    const {\n      errors,\n      wordList,\n      level,\n      gameStarted,\n      currentWord,\n      endQuestions\n    } = this.state; // If level is 0 display start button else display next level button\n\n    if (gameStarted == false) {\n      if (level == 0) {\n        var buttonElement = /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.handleNextLevel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }\n        }, \"Start\");\n      } else {\n        var buttonElement = /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.handleNextLevel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }\n        }, \"Next level\");\n      }\n    } // If the game is started don't display the next level button\n    else {\n        var buttonElement = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n        for (let i = 0; i < wordList.length; i++) {\n          this.setState({\n            currentWord: wordList[i]\n          }, setTimeout(this.state.level * 1000 * 4 / this.state.speed / wordList.length));\n        }\n      }\n\n    if (!errors) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      }, level != 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, \" Level: \", level, \" \") : /*#__PURE__*/React.createElement(React.Fragment, null)), endQuestions ? currentWord : wordList, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }), buttonElement);\n    } // Error handling\n    else if (errors) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \"Something is wrong. Please try again.\");\n      }\n  }\n\n}\nexport default FetchRandomWords;","map":{"version":3,"sources":["/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js"],"names":["React","Component","Game","FetchRandomWords","constructor","props","state","wordList","level","score","speed","correctWordList","wrongWordList","currentWord","gameStarted","endQuestions","errors","fetchRandomWords","bind","handleNextLevel","handleCorrectAnswer","lst","map","word","slice","wordToPush","length","push","setState","totalWords","wrongWords","response","fetch","websiteUrl","data","json","err","prevState","render","buttonElement","i","setTimeout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Game from './Game'\nexport class FetchRandomWords extends Component {\n    constructor(props) {\n        super(props)\n        // initializing the variables that I am going to use later.\n        this.state = {\n\n            wordList: [],\n            level: 0,\n            score: 0,\n            speed: 1,\n            correctWordList: [],\n            wrongWordList: [],\n            currentWord: '',\n            gameStarted: false,\n            endQuestions: false,\n            errors: false,\n        }\n        this.fetchRandomWords = this.fetchRandomWords.bind(this)\n        this.handleNextLevel = this.handleNextLevel.bind(this)\n    }\n\n\n\n    // Helper function to divide the list by correct ones and wrong ones.\n    handleCorrectAnswer(lst) {\n        var correctWordList = []\n        var wrongWordList = []\n        lst.map(function (word) {\n            // The words that ends with :C are the correct ones.\n            if (word.slice(-2) == ':C') {\n                let wordToPush = word.slice(0, word.length - 2)\n                correctWordList.push(wordToPush)\n            } else {\n                wrongWordList.push(word)\n            }\n        })\n        this.setState({\n            correctWordList: correctWordList,\n            wrongWordList: wrongWordList\n        })\n        var correctWordList = this.state.correctWordList\n        var wrongWordList = this.state.wrongWordList\n\n        this.setState({\n            wordList: correctWordList,\n        })\n\n        //var wordList = correctWordList.concat(wrongWordList)\n        //wordList = wordList.sort(() => Math.random() - 0.5);\n\n    }\n\n    async fetchRandomWords(level) {\n        try {\n            var totalWords = level * 4\n            var wrongWords = totalWords / 4\n            var response = await (fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`));\n            var data = await response.json();\n\n            // We are seperating the words by their last 2 character which is \":C\"\n            this.handleCorrectAnswer(data)\n\n            // If there is any error handle it by changing the state errors:true.\n        } catch (err) {\n            this.setState({\n                errors: true,\n            })\n        }\n\n    }\n\n    handleNextLevel() {\n        this.setState((prevState) => ({\n            level: prevState.level + 1,\n            gameStarted: true,\n            endQuestions: false\n        }));\n\n        this.fetchRandomWords(this.state.level)\n\n\n\n    }\n    render() {\n        const { errors, wordList, level, gameStarted, currentWord, endQuestions } = this.state\n        // If level is 0 display start button else display next level button\n        if (gameStarted == false) {\n            if (level == 0) {\n                var buttonElement = (\n                    <button onClick={() => this.handleNextLevel()}>Start</button>\n                )\n            } else {\n                var buttonElement = (\n                    <button onClick={() => this.handleNextLevel()}>Next level</button>\n                )\n            }\n        }\n        // If the game is started don't display the next level button\n        else {\n            var buttonElement = (\n                <></>\n            )\n\n            for (let i = 0; i < wordList.length; i++) {\n                this.setState({ currentWord: wordList[i] }, setTimeout((this.state.level * 1000 * 4 / this.state.speed) / wordList.length))\n            }\n\n\n        }\n\n\n        if (!errors) {\n            return (\n                <>\n                    <h1>{level != 0 ? <> Level: {level} </> : <></>}</h1>\n                    {endQuestions ? currentWord : wordList}\n                    <br />\n                    {buttonElement}\n                </>\n            )\n        }\n\n        // Error handling\n        else if (errors) {\n            return (\n                <>Something is wrong. Please try again.</>\n            )\n        }\n    }\n}\n\nexport default FetchRandomWords\n"]},"metadata":{},"sourceType":"module"}