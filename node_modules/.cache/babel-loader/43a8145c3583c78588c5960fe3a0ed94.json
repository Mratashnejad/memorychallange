{"ast":null,"code":"var _jsxFileName = \"/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js\";\nimport React, { Component } from 'react';\nimport Game from './Game';\nexport class FetchRandomWords extends Component {\n  constructor(props) {\n    super(props); // initializing the variables that I am going to use later.\n\n    this.state = {\n      randomWords: [],\n      correctWordList: [],\n      wrongWordList: [],\n      Render: false,\n      errors: false,\n      level: 0\n    };\n    this.handleLevel = this.handleLevel.bind(this);\n  }\n\n  async fetchRandomWords(level) {\n    try {\n      var totalWords = level * 4;\n      var wrongWords = totalWords / 4;\n      let response = await fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`);\n      let data = await response.json();\n      this.setState({\n        // Rendering if the response that is coming from the API is okay.\n        Render: true\n      });\n      this.handleCorrectAnswer(data); // If there is any error handle it by changing the state Render:false and errors:true.\n    } catch (err) {\n      this.setState({\n        errors: true,\n        Render: false\n      });\n    }\n  }\n\n  handleLevel(level) {\n    this.setState({\n      level: level\n    }, console.log(this.state.level));\n  }\n\n  handleCorrectAnswer(lst) {\n    var correctWordList = [];\n    var wrongWordList = [];\n    lst.map(function (word) {\n      // The words that ends with :C are the correct ones.\n      if (word.slice(-2) == ':C') {\n        let wordToPush = word.slice(0, word.length - 2);\n        correctWordList.push(wordToPush);\n      } else {\n        wrongWordList.push(word);\n      }\n    });\n    this.setState({\n      correctWordList: correctWordList,\n      wrongWordList: wrongWordList\n    });\n  }\n\n  componentWillMount() {\n    // Fetching the data before render.\n    this.fetchRandomWords(this.state.level);\n    this.handleCorrectAnswer(this.state.randomWords);\n  }\n\n  render() {\n    const {\n      Render,\n      errors,\n      randomWords,\n      correctWordList,\n      wrongWordList,\n      level\n    } = this.state; // Rendering the data if this.state.Render is true as we set.\n\n    if (Render) {\n      return (\n        /*#__PURE__*/\n        // Passing the correct word list and wrong word list to handle the game in another component so the this component doesnt\n        // get too complex and messy.\n        React.createElement(Game, {\n          correctWordList: correctWordList,\n          wrongWordList: wrongWordList,\n          level: level,\n          handleLevel: this.handleLevel,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }\n        })\n      );\n    } // If the data is taken too much time to load display a spinning animation.\n    else if (Render == false) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \"Wait\");\n      } // Error handling\n      else if (errors) {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, \"Something is wrong. Please try again.\");\n        }\n  }\n\n}\nexport default FetchRandomWords;","map":{"version":3,"sources":["/Users/berkgaffaroglu/Documents/MemoryChallange/memorychallange/src/components/FetchRandomWords.js"],"names":["React","Component","Game","FetchRandomWords","constructor","props","state","randomWords","correctWordList","wrongWordList","Render","errors","level","handleLevel","bind","fetchRandomWords","totalWords","wrongWords","response","fetch","websiteUrl","data","json","setState","handleCorrectAnswer","err","console","log","lst","map","word","slice","wordToPush","length","push","componentWillMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Game from './Game'\nexport class FetchRandomWords extends Component {\n    constructor(props) {\n        super(props)\n        // initializing the variables that I am going to use later.\n        this.state = {\n            randomWords: [],\n            correctWordList: [],\n            wrongWordList: [],\n            Render: false,\n            errors: false,\n            level:0\n        }\n        this.handleLevel = this.handleLevel.bind(this)\n    }\n    async fetchRandomWords(level) {\n        try {\n            var totalWords = level * 4\n            var wrongWords = totalWords / 4\n            let response = await (fetch(this.props.websiteUrl + `api/get-random-words/total=${totalWords}/wrong=${wrongWords}`));\n            let data = await response.json();\n            this.setState({\n                // Rendering if the response that is coming from the API is okay.\n                Render: true\n            })\n            this.handleCorrectAnswer(data)\n\n            // If there is any error handle it by changing the state Render:false and errors:true.\n        } catch (err) {\n            this.setState({\n                errors: true,\n                Render: false\n            })\n        }\n\n    }\n    handleLevel(level) {\n        this.setState({\n            level:level\n        },console.log(this.state.level))\n        \n    }\n\n    handleCorrectAnswer(lst) {\n        var correctWordList = []\n        var wrongWordList = [] \n        lst.map(function(word){\n            // The words that ends with :C are the correct ones.\n            \n            if(word.slice(-2) == ':C') {\n                let wordToPush = word.slice(0, word.length - 2)\n                correctWordList.push(wordToPush)\n            } else {\n                wrongWordList.push(word)\n            }\n        })\n        this.setState({\n            correctWordList: correctWordList,\n            wrongWordList: wrongWordList\n        })\n\n    }\n    componentWillMount() {\n        // Fetching the data before render.\n        this.fetchRandomWords(this.state.level)\n        this.handleCorrectAnswer(this.state.randomWords)\n    }\n    render() {\n        const { Render, errors, randomWords, correctWordList, wrongWordList, level } = this.state\n        // Rendering the data if this.state.Render is true as we set.\n        if (Render) {\n            return (\n                // Passing the correct word list and wrong word list to handle the game in another component so the this component doesnt\n                // get too complex and messy.\n                <Game correctWordList={correctWordList} wrongWordList={wrongWordList} level={level} handleLevel={this.handleLevel}/>\n            )\n        }\n        // If the data is taken too much time to load display a spinning animation.\n        else if (Render == false) {\n            return (\n                <>Wait</>\n            )\n        }\n        // Error handling\n        else if (errors) {\n            return (\n                <>Something is wrong. Please try again.</>\n            )\n        }\n    }\n}\n\nexport default FetchRandomWords\n"]},"metadata":{},"sourceType":"module"}